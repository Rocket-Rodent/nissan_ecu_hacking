    UPDATE: I've just found CAN messages for a 2010 370z on Github (see below) and they seem to remain roughly the same
    https://github.com/Knio/carhack/blob/master/Cars/Nissan.markdown
    Also, those ^ are formatted better lmao

    Note to self:
    In the future, as I get more codes and a better understanding of everything, I will try to make a DBC file using
    either Vector CANdb++ editor or MATLAB (using the vehicle network toolbox?)
    https://www.csselectronics.com/pages/can-dbc-file-database-intro


    ____Notes____
    Thus far, I've decoded the following CAN bus codes for a 2008 Nissan 350z (stock ecu, stock VQ35HR engine)
    Codes found and replayed using Wireshark (windows) and can-utils (linux) using the Korlan (8Devices) usb2can hardware

    These codes are in HEX, i.e. 40 is NOT 40, but rather 64
    Capitilzation doesn't affect value (a is the same as A) numerically, but I'm unsure if the ECU cares or not
    ~Refresher / Intro to Hexadecimal~
    It is a base 16 number system (our normal counting system - decimal - is base 10)
    So instead of counting 0,1,2,3,4,5,6,7,8,9,10,11, etc. we use: 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F
                                                                                                 10,11,12,13,14,15
    Note, Hexadecimal doesn't go past F, so don't think that 16 is G and H is 17, etc.
    If you need to show large values, then you gotta do math (I recommend just Googling it) but basically it's just manipulating exponents on 16

    Okay, on with the codes:

    observed  = captured,   not replayed, highly likely
    confirmed = captured,   replayed,     proven to work

    I have formatted the codes to be
    0xArbitration_ID  CAN MSG*    (function of msg)   [status]
    *Often 8 bytes long but some have been recorded to be less

    ++Codes with Known Purpose++
    0x00000358  01 00 00 00 00 00 00 00 (TOGGLE AC 'AUTO' SETTING OFF)  [observed]
    0x0000035D  C0 50 00 00 00 00 00 00 (TOGGLE AC 'AUTO' SETTING ON)   [observed]
    0x00000354  00 00 00 00 40 00 04 00 (TOGGLE TCS OFF)                [confirmed] - other bytes may relay speed
    0x00000354  00 00 00 00 00 00 04 00 (TOGGLE TCS ON)                 [confirmed] - other bytes may relay speed
    0x0000060D  06 00 00 00 00 00 20 00 (HOLD HIGH BEAMS ON)            [observed]
    0x0000060D  02 0E 00 00 00 00 20 00 (HOLD HIGH BEAMS OFF / RELEASE) [observed]
    0x00000625  32 30 FF 1C 00 00       (TOGGLE HIGH BEAMS ON)          [observed]
    0x00000625  32 00 FF 1C 00 00       (TOGGLE HIGH BEAMS OFF)         [observed]
    0x0000060D  08 06 00 00 00 00 20 00 (SET TURN SIGNAL OFF)           [confirmed] NOTE: turn signal operates by setting on and off repeatedly
    0x0000060D  08 26 00 00 00 00 20 00 (SET LEFT TURN SIGNAL ON)       [confirmed]
    0x0000060D  08 46 00 00 00 00 20 00 (SET RIGHT TURN SIGNAL ON)      [confirmed]

    ++Codes with Unknown Purpose++
    0x00000625  32 60 FF 1C 00 00       (DRL? HIGH BEAMS?)              [observed]  NOTE: not fully determined purpose
    0x000006f0  00 00 43 6(2-4) 00 00   (RELATED TO DOOR CONTROLS)      [observed]  NOTE: not fully determined purpose; '64' varies from 62-64
    0x00000358  01 C0 00 00 X2 00 00    X being 0 or 8, related to high beams? [observed]

    ++Possible CRC's (Cyclic Redundancy Checks) or Counters?++
    0x000002D1  00 00 00 00 31 ed 02    Some sort of counter, '00 31 ed 02' count up according to hex number system (except 31 and 02)
                                                              maxes out at 00 31 f8 02 then changes to 01 31 ee 02, then to 01 f0 02,
                                                              then up to 01 31 f8 02 and repeats this patten until 03 31 f8 02

    0x0000029e  00 19 00 00 00 00 00 69
                                  01 ba
                                  02 bb
                                  03 bc

    0x00000280  00 00 00 00 00 00 95 40
                                  96 40
                                  97 40
                                  98 40

    0x00000284  00 00 00 00 00 00 0(0-9) 8(6-f)  -- (0-9) meaning 0,1,2,3,4,5,6,7,8,9 and (6-f) meaning 6,7,8,9,a,b,c,d,e,f
                                  0(a-f) 9(0-5)
                                  1(0-9) 9(6-f)  -- By now I assume you see the pattern, an understanding of hexadecimal numbers helps greatly
                                  1(a-f) a(0-5)
                                  2(0-9) a(6-f)
                                  ... follows pattern until
                                  ff     85

    0x00000285  00 00 00 00 00 00 00 87
                                |_____|
                                these bits follow the above pattern starting from here until ff 86

    0x0000023d  X3 00 00 00 00 ea 09 6f     X being either: 0, 2, 4, 6      Some sort of counter by evens? (CLUSTER INDICATOR) 
                          |__|
                           Tach - first bit is the high bit
                 |_ - Internal counter - Has something to do with traction control         
                                      |_ Coolant gauge
                                      
    0x00000251  10 01 00 01 00 2f 13 37
                              |________|
                              NOTE: the following combinations are not in order of time sent, but rather numerical order to demonstrate range of possibilities
                               2f 17 5d
                               2f 43 00
                               6f 10 52
                               6f 14 32
                               6f 40 00
                               af 11 58
                               af 15 37
                               af 41 00
                               ef 12 32
                               ef 16 06
                               ef 42 00

    0x0000023e  00 60 ff ea 09 ce 00 5(0-3)

    0x00000231  00 (8-b)0 00 00 00 c2 4e 9e

    0x00000253  0(0-3) 5b ff 00 00 00 00 00

    0x000002de  02 00  0(0-3)


